diff a/go/pkg/sysdb/grpc/collection_service.go b/go/pkg/sysdb/grpc/collection_service.go	(rejected hunks)
@@ -3,7 +3,6 @@ package grpc
 import (
 	"context"
 	"encoding/json"
-	"fmt"
 
 	"github.com/chroma-core/chroma/go/pkg/grpcutils"
 
@@ -250,31 +249,15 @@ func (s *Server) GetCollectionWithSegments(ctx context.Context, req *coordinator
 		}
 		return res, grpcutils.BuildInternalGrpcError(err.Error())
 	}
-
 	res.Collection = convertCollectionToProto(collection)
+
 	segmentpbList := make([]*coordinatorpb.Segment, 0, len(segments))
-	scopeToSegmentMap := map[coordinatorpb.SegmentScope]*coordinatorpb.Segment{}
 	for _, segment := range segments {
 		segmentpb := convertSegmentToProto(segment)
-		scopeToSegmentMap[segmentpb.GetScope()] = segmentpb
 		segmentpbList = append(segmentpbList, segmentpb)
 	}
-
-	if len(segmentpbList) != 3 {
-		log.Error("GetCollectionWithSegments failed. Unexpected number of collection segments", zap.String("collection_id", collectionID))
-		return res, grpcutils.BuildInternalGrpcError(fmt.Sprintf("Unexpected number of segments for collection %s: %d", collectionID, len(segmentpbList)))
-	}
-
-	scopes := []coordinatorpb.SegmentScope{coordinatorpb.SegmentScope_METADATA, coordinatorpb.SegmentScope_RECORD, coordinatorpb.SegmentScope_VECTOR}
-
-	for _, scope := range scopes {
-		if _, exists := scopeToSegmentMap[scope]; !exists {
-			log.Error("GetCollectionWithSegments failed. Collection segment scope not found", zap.String("collection_id", collectionID), zap.String("missing_scope", scope.String()))
-			return res, grpcutils.BuildInternalGrpcError(fmt.Sprintf("Missing segment scope for collection %s: %s", collectionID, scope.String()))
-		}
-	}
-
 	res.Segments = segmentpbList
+
 	return res, nil
 }
 
