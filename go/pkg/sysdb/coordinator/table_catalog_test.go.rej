diff a/go/pkg/sysdb/coordinator/table_catalog_test.go b/go/pkg/sysdb/coordinator/table_catalog_test.go	(rejected hunks)
@@ -158,21 +158,42 @@ func TestCatalog_GetCollectionSize(t *testing.T) {
 }
 
 type mockS3MetaStore struct {
-	mu    sync.RWMutex
-	files map[string]*coordinatorpb.CollectionVersionFile
+	mu           sync.RWMutex
+	lineageFiles map[string]*coordinatorpb.CollectionLineageFile
+	versionFiles map[string]*coordinatorpb.CollectionVersionFile
 }
 
 func newMockS3MetaStore() *mockS3MetaStore {
 	return &mockS3MetaStore{
-		files: make(map[string]*coordinatorpb.CollectionVersionFile),
+		versionFiles: make(map[string]*coordinatorpb.CollectionVersionFile),
 	}
 }
 
-func (m *mockS3MetaStore) GetVersionFile(tenantID, collectionID string, version int64, fileName string) (*coordinatorpb.CollectionVersionFile, error) {
+func (m *mockS3MetaStore) GetLineageFile(fileName string) (*coordinatorpb.CollectionLineageFile, error) {
 	m.mu.RLock()
 	defer m.mu.RUnlock()
 
-	if file, exists := m.files[fileName]; exists {
+	if file, exists := m.lineageFiles[fileName]; exists {
+		return file, nil
+	}
+	return &coordinatorpb.CollectionLineageFile{
+		Dependencies: []*coordinatorpb.CollectionVersionDependency{},
+	}, nil
+}
+
+func (m *mockS3MetaStore) PutLineageFile(tenantID, databaseID, collectionID, fileName string, file *coordinatorpb.CollectionLineageFile) (string, error) {
+	m.mu.Lock()
+	defer m.mu.Unlock()
+
+	m.lineageFiles[fileName] = file
+	return fileName, nil
+}
+
+func (m *mockS3MetaStore) GetVersionFile(fileName string) (*coordinatorpb.CollectionVersionFile, error) {
+	m.mu.RLock()
+	defer m.mu.RUnlock()
+
+	if file, exists := m.versionFiles[fileName]; exists {
 		return file, nil
 	}
 	return &coordinatorpb.CollectionVersionFile{
@@ -186,7 +207,7 @@ func (m *mockS3MetaStore) PutVersionFile(tenantID, databaseID, collectionID, fil
 	m.mu.Lock()
 	defer m.mu.Unlock()
 
-	m.files[fileName] = file
+	m.versionFiles[fileName] = file
 	return fileName, nil
 }
 
@@ -198,7 +219,7 @@ func (m *mockS3MetaStore) DeleteVersionFile(tenantID, databaseID, collectionID,
 	m.mu.Lock()
 	defer m.mu.Unlock()
 
-	delete(m.files, fileName)
+	delete(m.versionFiles, fileName)
 	return nil
 }
 
@@ -299,7 +320,7 @@ func TestCatalog_FlushCollectionCompactionForVersionedCollection(t *testing.T) {
 	mockSegmentDb.AssertExpectations(t)
 
 	// Verify S3 store has the new version file
-	assert.Greater(t, len(mockS3Store.files), 0)
+	assert.Greater(t, len(mockS3Store.versionFiles), 0)
 }
 
 func TestCatalog_DeleteCollectionVersion(t *testing.T) {
@@ -380,9 +401,6 @@ func TestCatalog_DeleteCollectionVersion(t *testing.T) {
 	assert.NoError(t, err)
 	// Verify the version file was updated correctly
 	updatedFile, err := mockS3Store.GetVersionFile(
-		tenantID,
-		collectionID,
-		int64(currentVersion),
 		existingVersionFileName,
 	)
 	assert.NoError(t, err)
@@ -514,9 +532,6 @@ func TestCatalog_MarkVersionForDeletion(t *testing.T) {
 	existingVersionFileName, err = catalog.GetVersionFileNamesForCollection(context.Background(), tenantID, collectionID)
 	assert.NoError(t, err)
 	updatedFile, err := mockS3Store.GetVersionFile(
-		tenantID,
-		collectionID,
-		int64(currentVersion),
 		existingVersionFileName,
 	)
 	assert.NoError(t, err)
