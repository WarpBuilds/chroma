diff a/go/pkg/sysdb/metastore/s3/impl.go b/go/pkg/sysdb/metastore/s3/impl.go	(rejected hunks)
@@ -22,6 +22,7 @@ import (
 // Example:
 // s3://<bucket-name>/<sysdbPathPrefix>/<tenant_id>/databases/<database_id>/collections/<collection_id>/versionfiles/file_name
 const (
+	lineageFilesPathFormat = "%s/databases/%s/collections/%s/lineagefiles/%s"
 	versionFilesPathFormat = "%s/databases/%s/collections/%s/versionfiles/%s"
 )
 
@@ -37,7 +38,9 @@ type S3MetaStoreConfig struct {
 }
 
 type S3MetaStoreInterface interface {
-	GetVersionFile(tenantID, collectionID string, version int64, fileName string) (*coordinatorpb.CollectionVersionFile, error)
+	GetLineageFile(lineageFileName string) (*coordinatorpb.CollectionLineageFile, error)
+	PutLineageFile(tenantID, databaseID, collectionID, fileName string, file *coordinatorpb.CollectionLineageFile) (string, error)
+	GetVersionFile(versionFileName string) (*coordinatorpb.CollectionVersionFile, error)
 	PutVersionFile(tenantID, databaseID, collectionID, fileName string, file *coordinatorpb.CollectionVersionFile) (string, error)
 	HasObjectWithPrefix(ctx context.Context, prefix string) (bool, error)
 	DeleteVersionFile(tenantID, databaseID, collectionID, fileName string) error
@@ -127,15 +130,68 @@ func NewS3MetaStore(config S3MetaStoreConfig) (*S3MetaStore, error) {
 	}, nil
 }
 
-// Get the version file from S3. Return the protobuf.
-func (store *S3MetaStore) GetVersionFile(tenantID, collectionID string, version int64, versionFileName string) (*coordinatorpb.CollectionVersionFile, error) {
-	// path := store.GetVersionFilePath(tenantID, collectionID, versionFileName)
-	path := versionFileName
-	log.Info("getting version file from S3", zap.String("path", path))
+func (store *S3MetaStore) GetLineageFile(lineageFileName string) (*coordinatorpb.CollectionLineageFile, error) {
+	log.Info("Getting lineage file from S3", zap.String("path", lineageFileName))
 
 	input := &s3.GetObjectInput{
+		Bucket: aws.String(store.BucketName),
+		Key:    aws.String(lineageFileName),
+	}
+
+	result, err := store.S3.GetObject(input)
+	if err != nil {
+		return nil, err
+	}
+	defer result.Body.Close()
+
+	data, err := io.ReadAll(result.Body)
+	if err != nil {
+		return nil, err
+	}
+
+	lineageFile := &coordinatorpb.CollectionLineageFile{}
+	if err := proto.Unmarshal(data, lineageFile); err != nil {
+		return nil, fmt.Errorf("failed to unmarshal version file: %w", err)
+	}
+
+	return lineageFile, nil
+}
+
+func (store *S3MetaStore) GetLineageFilePath(tenantID string, databaseID string, collectionID string, versionFileName string) string {
+	return fmt.Sprintf(versionFilesPathFormat,
+		tenantID, databaseID, collectionID, versionFileName)
+}
+
+func (store *S3MetaStore) PutLineageFile(tenantID string, databaseID string, collectionID string, lineageFileName string, lineageFile *coordinatorpb.CollectionLineageFile) (string, error) {
+	path := store.GetLineageFilePath(tenantID, databaseID, collectionID, lineageFileName)
+
+	data, err := proto.Marshal(lineageFile)
+	if err != nil {
+		return "", fmt.Errorf("Failed to marshal lineage file: %w", err)
+	}
+
+	numForks := len(lineageFile.Dependencies)
+	log.Info("Putting lineage file", zap.String("collectionID", collectionID), zap.Int("numForks", numForks))
+
+	input := &s3.PutObjectInput{
 		Bucket: aws.String(store.BucketName),
 		Key:    aws.String(path),
+		Body:   bytes.NewReader(data),
+	}
+
+	output, err := store.S3.PutObject(input)
+	log.Info("Put object output", zap.Any("output", output), zap.Error(err))
+
+	return path, err
+}
+
+// Get the version file from S3. Return the protobuf.
+func (store *S3MetaStore) GetVersionFile(versionFileName string) (*coordinatorpb.CollectionVersionFile, error) {
+	log.Info("getting version file from S3", zap.String("path", versionFileName))
+
+	input := &s3.GetObjectInput{
+		Bucket: aws.String(store.BucketName),
+		Key:    aws.String(versionFileName),
 	}
 
 	result, err := store.S3.GetObject(input)
