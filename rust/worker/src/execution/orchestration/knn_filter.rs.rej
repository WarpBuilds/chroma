diff a/rust/worker/src/execution/orchestration/knn_filter.rs b/rust/worker/src/execution/orchestration/knn_filter.rs	(rejected hunks)
@@ -240,7 +240,7 @@ impl Handler<TaskResult<FetchLogOutput, FetchLogError>> for KnnFilterOrchestrato
         message: TaskResult<FetchLogOutput, FetchLogError>,
         ctx: &ComponentContext<Self>,
     ) {
-        let output = match self.ok_or_terminate(message.into_inner(), ctx) {
+        let output = match self.ok_or_terminate(message.into_inner(), ctx).await {
             Some(output) => output,
             None => return,
         };
@@ -270,17 +270,20 @@ impl Handler<TaskResult<FilterOutput, FilterError>> for KnnFilterOrchestrator {
         message: TaskResult<FilterOutput, FilterError>,
         ctx: &ComponentContext<Self>,
     ) {
-        let output = match self.ok_or_terminate(message.into_inner(), ctx) {
+        let output = match self.ok_or_terminate(message.into_inner(), ctx).await {
             Some(output) => output,
             None => return,
         };
-        let collection_dimension = match self.ok_or_terminate(
-            self.collection_and_segments
-                .collection
-                .dimension
-                .ok_or(KnnError::NoCollectionDimension),
-            ctx,
-        ) {
+        let collection_dimension = match self
+            .ok_or_terminate(
+                self.collection_and_segments
+                    .collection
+                    .dimension
+                    .ok_or(KnnError::NoCollectionDimension),
+                ctx,
+            )
+            .await
+        {
             Some(dim) => dim as u32,
             None => return,
         };
@@ -298,6 +301,7 @@ impl Handler<TaskResult<FilterOutput, FilterError>> for KnnFilterOrchestrator {
                         ),
                     ctx,
                 )
+                .await
                 .flatten()
             {
                 Some(hnsw_configuration) => hnsw_configuration,
@@ -319,19 +323,22 @@ impl Handler<TaskResult<FilterOutput, FilterError>> for KnnFilterOrchestrator {
                 }
 
                 Err(err) => {
-                    self.terminate_with_result(Err((*err).into()), ctx);
+                    self.terminate_with_result(Err((*err).into()), ctx).await;
                     return;
                 }
             }
         } else {
-            let params = match self.ok_or_terminate(
-                self.collection_and_segments
-                    .collection
-                    .config
-                    .get_spann_config()
-                    .ok_or(KnnError::InvalidDistanceFunction),
-                ctx,
-            ) {
+            let params = match self
+                .ok_or_terminate(
+                    self.collection_and_segments
+                        .collection
+                        .config
+                        .get_spann_config()
+                        .ok_or(KnnError::InvalidDistanceFunction),
+                    ctx,
+                )
+                .await
+            {
                 Some(params) => params,
                 None => return,
             };
@@ -355,7 +362,7 @@ impl Handler<TaskResult<FilterOutput, FilterError>> for KnnFilterOrchestrator {
             dimension: collection_dimension as usize,
             fetch_log_bytes,
         };
-        self.terminate_with_result(Ok(output), ctx);
+        self.terminate_with_result(Ok(output), ctx).await;
     }
 }
 
