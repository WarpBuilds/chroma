diff a/idl/chromadb/proto/coordinator.proto b/idl/chromadb/proto/coordinator.proto	(rejected hunks)
@@ -216,6 +216,19 @@ message UpdateCollectionResponse {
   reserved "status";
 }
 
+message ForkCollectionRequest {
+  string source_collection_id = 1;
+  uint64 source_collection_log_compaction_offset = 2;
+  uint64 source_collection_log_enumeration_offset = 3;
+  string target_collection_id = 4;
+  string target_collection_name = 5;
+}
+
+message ForkCollectionResponse {
+  Collection collection = 1;
+  repeated Segment segments = 2;
+}
+
 message ResetStateResponse {
   reserved 1;
   reserved "status";
@@ -333,13 +346,6 @@ message CollectionSegmentInfo {
     // GC's {collection,version} selection policy.
 }
 
-// Tuple of collection ID, tenant ID, and version.
-message CollectionVersionTuple {
-    string collection_id = 1;
-    string tenant_id = 2;
-    int64 version = 3;
-}
-
 message VersionListForCollection {
   string tenant_id = 1;
   string database_id = 2;
@@ -347,20 +353,6 @@ message VersionListForCollection {
   repeated int64 versions = 4;
 }
 
-// Contains information about the lineage of a collection.
-message CollectionLineageInfo {
-    // ID of the collection.
-    string collection_id = 1;
-    // ID of the tenant.
-    string tenant_id = 2;
-    // Whether the collection is a root collection.
-    bool is_root_collection = 3;
-    // An ordered list of descendant collections.
-    // The first element is the root {collection, version}, and the last
-    // element is the direct parent of the current collection.
-    repeated CollectionVersionTuple parent_collections = 4;
-}
-
 // Request to list versions of a collection.
 message ListCollectionVersionsRequest {
   string collection_id = 1;
@@ -382,6 +374,16 @@ message ListCollectionVersionsResponse {
   bool list_is_truncated = 2;
 }
 
+message CollectionLineageFile {
+	repeated CollectionVersionDependency dependencies = 1;
+}
+
+message CollectionVersionDependency {
+	string source_collection_id = 1; // The forked collection
+	uint64 source_collection_version = 2; // The forked collection version
+	string target_collection_id = 3; // The forking collection
+}
+
 // Request to restore a collection.
 message RestoreCollectionRequest {
   string collection_id = 1;
@@ -473,6 +475,7 @@ service SysDB {
   rpc GetCollectionWithSegments(GetCollectionWithSegmentsRequest) returns (GetCollectionWithSegmentsResponse) {}
   rpc CheckCollections(CheckCollectionsRequest) returns (CheckCollectionsResponse) {}
   rpc UpdateCollection(UpdateCollectionRequest) returns (UpdateCollectionResponse) {}
+  rpc ForkCollection(ForkCollectionRequest) returns (ForkCollectionResponse) {}
   rpc ResetState(google.protobuf.Empty) returns (ResetStateResponse) {}
   rpc GetLastCompactionTimeForTenant(GetLastCompactionTimeForTenantRequest) returns (GetLastCompactionTimeForTenantResponse) {}
   rpc SetLastCompactionTimeForTenant(SetLastCompactionTimeForTenantRequest) returns (google.protobuf.Empty) {}
