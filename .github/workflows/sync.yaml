name: Sync
on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/10 * * * *" # Runs every 10 minutes

jobs:
  sync:
    name: Sync With Upstream
    runs-on: warp-ubuntu-latest-x64-4x
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout with GitHub App Token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Sync with upstream repository
        run: |
          # Get the upstream repository URL from GitHub API
          REPO_NAME="${GITHUB_REPOSITORY}"
          UPSTREAM_INFO=$(gh api repos/$REPO_NAME | jq -r '.parent.clone_url // empty')

          if [ -z "$UPSTREAM_INFO" ]; then
            echo "This doesn't appear to be a fork or the API couldn't retrieve the parent repository"
            exit 1
          fi

          echo "Upstream repository: $UPSTREAM_INFO"

          # Check if upstream remote exists, add it if it doesn't
          if ! git remote | grep -q "^upstream$"; then
            git remote add upstream $UPSTREAM_INFO
          else
            git remote set-url upstream $UPSTREAM_INFO
          fi

          # Fetch from upstream and origin
          git fetch upstream
          git fetch origin

          # Store current branch (typically main)
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"

          # Function to sync a branch with conflict resolution
          sync_branch() {
            local branch_name=$1
            echo "Syncing branch: $branch_name"

            # Check if we have upstream commits to sync
            BEHIND_COUNT=$(git rev-list --count HEAD..upstream/$branch_name)
            if [ "$BEHIND_COUNT" -eq 0 ]; then
              echo "Already up to date with upstream/$branch_name (no new commits to sync)"
              return 0
            fi

            echo "Found $BEHIND_COUNT commits to sync from upstream"

            # Create a temporary directory to work in
            TEMP_DIR=$(mktemp -d)
            echo "Working in temporary directory: $TEMP_DIR"

            # Clone current repo to temp directory
            git clone . $TEMP_DIR
            cd $TEMP_DIR

            # Setup git config in temp directory
            git config user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
            git config user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

            # Add upstream remote
            git remote add upstream $UPSTREAM_INFO
            git fetch upstream

            # Create a list of commits to cherry-pick
            COMMITS_TO_PICK=$(git rev-list --reverse HEAD..upstream/$branch_name)

            # Process each commit
            for COMMIT in $COMMITS_TO_PICK; do
              echo "Processing commit: $COMMIT"
              COMMIT_MSG=$(git log -1 --pretty=format:"%s" $COMMIT)

              # Get list of files changed in this commit, excluding workflow files
              FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r $COMMIT | grep -v "^.github/workflows/")

              if [ -z "$FILES_CHANGED" ]; then
                echo "Commit only changes workflow files, skipping"
                continue
              fi

              # Cherry-pick but only apply non-workflow changes
              git cherry-pick -n $COMMIT

              # Reset any workflow file changes
              git checkout HEAD -- .github/workflows/

              # Commit the changes with original commit message
              git commit -m "$COMMIT_MSG" || {
                echo "No changes to commit (possibly only workflow changes)"
                git reset --hard HEAD
                continue
              }
            done

            # Go back to original directory
            cd -

            # If there are new commits in the temp repo, apply them to our repo
            if [ "$(git -C $TEMP_DIR rev-list --count HEAD..)" -gt 0 ]; then
              echo "Applying synced commits to original repo"
              git -C $TEMP_DIR format-patch origin/$branch_name..HEAD --stdout | git am -3

              # Push changes to origin
              git push origin $branch_name
              echo "Pushed synced changes to origin"
            else
              echo "No non-workflow changes to apply"
            fi

            # Clean up
            rm -rf $TEMP_DIR
          }

          # ----- Sync current branch -----
          sync_branch "$CURRENT_BRANCH"

          echo "Sync complete"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
